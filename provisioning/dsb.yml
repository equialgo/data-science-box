---
- hosts: all
  sudo: yes
  vars:
    parallel_version: 20140622
    pHash_version: 0.9.6
    ipynb_server:
      ip: "'*'"
      port: 8888
    ijynb_server:
      ip: "'*'"
      port: 8998
    irnb_server:
      ip: "'*'"
      port: 9889
    locale: en_US.UTF-8
    postgresql:
      version: 9.3
      repo: 'deb http://apt.postgresql.org/pub/repos/apt/ trusty-pgdg main'
      install_development_headers: true
      pg_username: vagrant
      pg_password: vagrant
      user: postgres
      group: postgres
      config:
        shared_buffers: 24MB
        work_mem: 1MB
        checkpoint_segments: 3
        checkpoint_completion_target: 0.5
        effective_cache_size: 128MB

  tasks:
    - name: Make sure that the repos directory exists
      file: path=/home/vagrant/repos state=directory owner=vagrant group=vagrant
    - name: Make sure that the .bin directory exists
      file: path=/home/vagrant/.bin state=directory owner=vagrant group=vagrant

    - name: Add repository for node.js
      apt_repository: repo='ppa:chris-lea/node.js' update-cache=yes

    - name: Configure Go
      shell: echo 'golang-go golang-go/dashboard boolean true' > /tmp/preseed.conf
    - shell: debconf-set-selections /tmp/preseed.conf

    - name: Install Ubuntu packages
      apt: pkg={{item}} state=latest
      with_items:
        - git
        - python-pycurl
        - python-dev
        - libxml2-dev # lxml
        - libxslt1-dev # lxml
        - zlib1g-dev # lxml
        - libfreetype6-dev # for matplotlib
        - tree
        - webp #converting webp images
        - libwebp-dev #ImageMagic
        - feedgnuplot
        - bc
        - libeigen3-dev #tapkee
        - libarpack2-dev #tapkee
        - cmake # tapkee
        - golang-go
        - nodejs
        - make
        - curl
        - g++
        - python-software-properties 
        - python-setuptools
        - p7zip-full
        - unrar-free
        - unzip
        - openjdk-6-jdk
        - leiningen
        - cowsay
        - llvm-3.3 #numba 
        - llvm-3.3-runtime #numba 
        - libpq-dev #postgres  
        - python-psycopg2 #postgres 
        - libavformat-dev  #pHash 
        - libmpg123-dev #pHash 
        - libsamplerate-dev #pHash 
        - libsndfile-dev #pHash 
        - cimg-dev #pHash 
        - libavcodec-dev #pHash 
        - libswscale-dev #pHash 
        - libmemcached-dev #nbviewer
        - libcurl4-openssl-dev #nbviewer
        - pandoc #nbviewer
        - libevent-dev #nbviewer
        - libmysqlclient-dev #MySQL-python

    # INSTALLING PostgreSQL

    # Needed for add-apt-repository
    - name: Install python-software-properties
      apt: pkg=python-software-properties state=latest

    - name: Add repository key
      apt_key: id=ACCC4CF8 url='https://www.postgresql.org/media/keys/ACCC4CF8.asc' state=present

    - name: Add PostgreSQL repository
      apt_repository: repo='{{ postgresql.repo }}' state=present  #it's
      register: added_postgres_repo

    - name: Update apt cache if we just installed the Postgres repo
      apt: update_cache=yes
      sudo: true
      when: added_postgres_repo.changed

    - name: Install Postgresql server and client
      apt: pkg={{ item }}-{{ postgresql.version }} state=installed
      register: postgresql_install
      with_items:
        - postgresql
        - postgresql-contrib

      #Got from:http://blog.wercker.com/2013/11/25/django-16-part3.html
    - name: test for locale settings...
      command: locale
      register: locale_output
      changed_when: False

    - name: set locale to {{locale}}
      command: /usr/sbin/update-locale LANG={{locale}} LC_ALL={{locale}} LANGUAGE={{locale}}
      when: "'LC_ALL={{locale}}' not in locale_output.stdout"  #it's
      sudo: yes

    - name: Install PostgreSQL Host-Based-Authentication file
      template: src=templates/pg_hba.conf.j2
                dest=/etc/postgresql/{{ postgresql.version }}/main/pg_hba.conf
                owner={{ postgresql.user }} group={{ postgresql.group }}
      notify: restart postgresql
      tags:
        - configuration

    - name: Install PostgreSQL config file
      template: src=templates/postgresql.conf
                dest=/etc/postgresql/{{ postgresql.version }}/main/postgresql.conf
                owner={{ postgresql.user }} group={{ postgresql.group }}
      notify:
        - restart postgresql
      tags:
        - configuration

    #Make sure that it's restarted if it needs to be
    - meta: flush_handlers

    - name: start postgresql and configure to startup automatically
      service: name=postgresql state=started enabled=yes
      register: started

    - name: wait for postgresql restart
      command: sleep 2
      when: started.changed

    - name: create the default postgresql user
      postgresql_user: name={{postgresql.pg_username}} password={{postgresql.pg_password}} login_user=postgres role_attr_flags=CREATEDB,SUPERUSER
      sudo_user: postgres

    - name: test for server instrumentation
      command: psql -c 'select * from pg_extension;' -t -A
      sudo_user: postgres
      register: server_instrumentation
      changed_when: False

    - name: install server instrumentation
      command: psql -c 'CREATE EXTENSION adminpack;' -t -A
      sudo_user: postgres
      when: "'adminpack' not in server_instrumentation.stdout"

    # INSTALLING R

    - shell: sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E084DAB9
    - apt_repository: repo='deb http://cran.rstudio.com/bin/linux/ubuntu trusty/' state=present
    - apt: pkg=r-base-dev state=latest update_cache=yes
    - name: Install R packages
      shell: echo "install.packages(c('{{item}}'),repos='http://cran.us.r-project.org')" | R --slave --no-save --no-restore-history
      with_items:
        - ggplot2
        - sqldf
        - dplyr

    # INSTALLING Python

    - name: Easy_install pip (apt-get gives error)
      easy_install: name=pip

    - name: Install llvmpy for numba
      shell: sudo sh -c "LLVM_CONFIG_PATH=/usr/bin/llvm-config-3.3 pip install llvmpy"

    - name: Install Python packages
      pip: name={{item}} state=latest
      with_items:
        - awscli
        - csvkit
        - bigmler
        - cssselect
        - lxml
        - joblib
        - six
        - PrettyTable
        - beautifulsoup4
        - configparser
        - futures
        - logutils
        - numpy
        - scipy
        - scikit-learn
        - matplotlib
        - ipython[notebook]
        - pandas
        - sympy
        - nose
        - patsy
        - statsmodels
        - ggplot
        - seaborn
        - paramiko
        - rpy2
        - bokeh
        - psycopg2
        - numba
        - cython
        - numexpr
        - blaze
        - naturalsort
        - graphlab-create
        - pillow
        - imagehash
        - MySQL-python
        - python-levenshtein
        - git+https://github.com/quantopian/qgrid#egg=qgrid
    - name: Install mysql-connector-python
      pip: name=mysql-connector-python state=latest extra_args='--allow-external mysql-connector-python'
  
     # INSTALLING imageMagick
  
    - name: Download ImageMagick
      get_url: url=http://www.imagemagick.org/download/ImageMagick.tar.gz dest=/home/vagrant/ImageMagick.tar.gz
    - name: Install pHash Parallel
      shell: | 
        tar -xvzf /home/vagrant/ImageMagick.tar.gz
        rm /home/vagrant/ImageMagick.tar.gz
        cd ImageMagick-*
        ./configure && make && make install
        cd ..
        rm -rf ImageMagick-*
        ldconfig /usr/local/lib
      args:
        chdir: /home/vagrant/
        
    # INSTALLING pHash and py-phash

    - name: Download pHash
      get_url: url=http://phash.org/releases/pHash-{{ pHash_version }}.tar.gz dest=/home/vagrant/pHash-{{ pHash_version }}.tar.gz
    - name: Install pHash Parallel
      shell: | 
        tar -xvf /home/vagrant/pHash-{{ pHash_version }}.tar.gz
        rm pHash-{{ pHash_version }}.tar.gz
        cd pHash-{{ pHash_version }}
        ./configure && make && make install
        cd ..
        rm -rf pHash-{{ pHash_version }}
        ldconfig /usr/local/lib
      args:
        chdir: /home/vagrant/
    - name: Getting py-phash repo
      git: repo=https://github.com/polachok/py-phash.git dest=/home/vagrant/repos/py-phash/
    - name: Install py-phash
      shell: chdir=/home/vagrant/repos/py-phash python setup.py install

    # INSTALLING Conda iopro 

    - name: Download miniconda
      get_url: url=http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh dest=/tmp/miniconda.sh mode=0755
    - name: Install miniconda 
      shell: /tmp/miniconda.sh -b -p /home/vagrant/.miniconda creates=/home/vagrant/.miniconda
    - name: Install IOPro 
      shell: /home/vagrant/.miniconda/bin/conda install --yes --no-deps -p /usr/local -q iopro
    # - name: Install Accelerate 
    #   shell: /home/vagrant/.miniconda/bin/conda install --yes -p /usr/local -q accelerate
    # - name: Remove numpy install
      # shell: rm -rf /usr/local/lib/python2.7/site-packages/numpy*info
      # shell: rm -rf /usr/local/lib/python2.7/site-packages/numpy
    - name: Move from site-packages to dist-packages
      shell: cp -rf /usr/local/lib/python2.7/site-packages/* /usr/local/lib/python2.7/dist-packages/
      shell: rm -rf /usr/local/lib/python2.7/site-packages/* 

    # INSTALLING Julia

    - shell: sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 3D3D3ACC
    - apt_repository: repo='deb http://ppa.launchpad.net/staticfloat/juliareleases/ubuntu trusty main' state=present
    - apt: pkg=julia state=latest update_cache=yes
    - name: Updating Julia packages (as non-root user)
      shell: sudo julia -e 'Pkg.update()'
      sudo: no
    - name: Installing Julia packages (as non-root user)
      shell: sudo julia -e 'Pkg.add("{{item}}")' #it"s
      sudo: no
      with_items:
        - IJulia
    - name: updating ipython configuration
      template: src=templates/ijulia_notebook_config.py.j2 dest=/home/vagrant/.ipython/profile_julia/ipython_notebook_config.py owner=vagrant group=vagrant mode=0644 backup=true

    # INSTALLING nbviewer

    - name: Getting nbviewer repo
      git: repo=https://github.com/ipython/nbviewer.git dest=/home/vagrant/.nbviewer/
    - name: Installing nbviewer depndencies
      shell: chdir=/home/vagrant/.nbviewer pip install -r requirements.txt  

    # INSTALLING DSATCL
    
    - name: Get Data Science at the Command Line tools, data, and scripts
      git: repo=https://github.com/jeroenjanssens/data-science-at-the-command-line.git dest=/home/vagrant/.data-science-at-the-command-line 
    - name: Create symlink for book directory
      shell: ln -s /home/vagrant/.data-science-at-the-command-line/book /home/vagrant/book

    - name: Install jq
      get_url: url=http://stedolan.github.io/jq/download/linux64/jq dest=/home/vagrant/.bin/jq mode=0755 owner=vagrant group=vagrant

    - name: Install json2csv
      shell: sudo GOPATH=/home/vagrant/.go go get github.com/jehiah/json2csv

    - name: Get npm
      get_url: url=http://npmjs.org/install.sh dest=/tmp/install.sh
    - name: Install npm
      shell: sudo clean=yes sh /tmp/install.sh

    - name: Install xml2json
      npm: name=xml2json-command global=yes

    - name: Download GNU Parallel
      get_url: url=http://ftp.gnu.org/gnu/parallel/parallel-{{ parallel_version }}.tar.bz2 dest=/home/vagrant/parallel-{{ parallel_version }}.tar.bz2
    - name: Install GNU Parallel
      shell: | 
        tar -xvjf /home/vagrant/parallel-{{ parallel_version }}.tar.bz2
        rm parallel-{{ parallel_version }}.tar.bz2
        cd parallel-{{ parallel_version }}
        ./configure && make && make install
        cd ..
        rm -rf parallel-{{ parallel_version }}
      args:
        chdir: /home/vagrant/

    - name: Install SKLL
      pip: name=skll state=latest extra_args=--no-deps

    - name: Move Drake
      shell: cp /vagrant/provisioning/drake/drake.jar /home/vagrant/.bin/
    
    - name: Get Drip
      git: repo=https://github.com/flatland/drip.git dest=/home/vagrant/.drip-repo
    - name: Install Drip
      shell: chdir=/home/vagrant/.drip-repo make prefix=/home/vagrant/.bin/ install

    - name: Download csvfix
      get_url: url=https://bitbucket.org/neilb/csvfix/get/version-1.6.zip dest=/tmp/csvfix.zip
    - name: Unpack csvfix
      shell: chdir=/tmp/ unzip csvfix.zip; mv neilb* csvfix
    - name: Install csvfix
      shell: chdir=/tmp/csvfix make lin
    - name: Move csvfix
      shell: mv /tmp/csvfix/csvfix/bin/csvfix /home/vagrant/.bin/

    - name: Get Weka
      shell: wget -O /home/vagrant/repos/weka.zip http://downloads.sourceforge.net/project/weka/weka-3-7/3.7.11/weka-3-7-11.zip
    - name: Install Weka
      shell: |
        unzip weka.zip
        mv weka-3-7-11/weka.jar /home/vagrant/.bin/weka.jar
      args:
        chdir: /home/vagrant/repos

    #- name: Get Tapkee
      #git: repo=https://github.com/lisitsyn/tapkee.git dest=/home/vagrant/repos/tapkee/
    #- file: path=/home/vagrant/repos/tapkee/build state=directory 
    #- shell: cmake .. && make
      #args:
        #chdir: /home/vagrant/repos/tapkee/build
    #- name: Move Tapkee
      #shell: mv /home/vagrant/repos/tapkee/bin/tapkee /home/vagrant/.bin/

    - name: Clone csvquote
      git: repo=https://github.com/dbro/csvquote.git dest=/home/vagrant/repos/csvquote/
    - name: Install csvquote
      shell: chdir=/home/vagrant/repos/csvquote make; make install

    # FINISHING UP
    
    - name: Delete repos directory
      shell: rm -rf /home/vagrant/repos

    - name: Create symlink for dotfiles
      shell: ln -sf /vagrant/provisioning/dotfiles/{{ item }} /home/vagrant/.{{ item }}
      with_items:
        - bash_aliases
        - bash_completion
        - bashrc
        - profile

    - name: Create symlink for MOTD
      shell: ln -sf /vagrant/provisioning/motd/{{ item }} /etc/update-motd.d/{{ item }}
      with_items:
        - 00-header
        - 10-help-text

    - name: Update MOTD
      shell: run-parts /etc/update-motd.d/ | tee /var/run/motd.dynamic

    - name: Change owner
      file: path=/home/vagrant state=directory owner=vagrant group=vagrant recurse=yes

    # - name: Create workspace
    #   file: path=/vagrant/workspace state=directory owner=vagrant group=vagrant
    # - name: Linking workspace  
    #   shell: ln -s /vagrant/workspace /home/vagrant/workspace
    
    # INSTALLING iPython profiles

    - name: creating dsb ipython profile
      shell: /usr/local/bin/ipython profile create dsb
      sudo: no
    - name: updating ipython dsb configuration
      template: src=templates/ipython_notebook_config.py.j2 dest=/home/vagrant/.ipython/profile_dsb/ipython_notebook_config.py owner=vagrant group=vagrant mode=0644 backup=true
    
    - name: creating sh ipython profile
      shell: /usr/local/bin/ipython profile create sh
      sudo: no 
    - name: updating ipython sh configuration
      template: src=templates/ipysh_ipython_config.py.j2 dest=/home/vagrant/.ipython/profile_sh/ipython_config.py owner=vagrant group=vagrant mode=0644 backup=true

    - name: creating ir profile
      shell: /usr/local/bin/ipython profile create r
      sudo: no
    - name: updating ir configuration
      template: src=templates/ir_notebook_config.py.j2 dest=/home/vagrant/.ipython/profile_r/ipython_notebook_config.py owner=vagrant group=vagrant mode=0644 backup=true
    - name: updating ir startup script
      template: src=templates/rkernel.py dest=/home/vagrant/.ipython/profile_r/startup/rkernel.py owner=vagrant group=vagrant mode=0644 backup=true

    ##- name: Download Q
    ##get_url: url=https://raw.github.com/harelba/q/1.3.0/q dest=/home/vagrant/tools/q mode=0755 owner=vagrant group=vagrant
    ##- name: Download TextQL
    ##shell: sudo GOPATH=/home/vagrant/.go go get github.com/dinedal/textql  

  handlers:

    - name: restart postgresql
      service: name=postgresql state=restarted enabled=yes
